{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { act } from \"react-dom/test-utils\";\nimport fetcher from \"./movies\";\nexport const fetchMovies = createAsyncThunk('movies/fetchMovies', async _ref => {\n  let {\n    Text,\n    Page\n  } = _ref;\n  console.log(\"async is getting\", Text);\n  const dataFetch = await fetcher.get(`?apikey=e8960dea&s=${Text}&page=${Page}`).then(res => res.data.Search);\n  console.log(dataFetch);\n  return dataFetch;\n});\nconst movieSlice = createSlice({\n  name: \"movies\",\n  initialState: {\n    movieArr: [],\n    status: \"Pending\",\n    page: 1,\n    query: \"\"\n  },\n  reducers: {\n    setState: (state, action) => {\n      console.log(\"Hello\", action);\n      state.page = action.payload.Page;\n      state.query = action.payload.Text;\n    }\n  },\n  extraReducers: {\n    [fetchMovies.pending]: state => {\n      state.status = 'Pending';\n    },\n    [fetchMovies.fulfilled]: (state, action) => {\n      state.status = 'Fulfilled';\n      console.log(\"actoin\", action);\n      console.log(\"before\", state.movieArr);\n      state.movieArr = action.payload;\n      console.log(\"after\", state.movieArr);\n    },\n    [fetchMovies.rejected]: state => {\n      state.status = 'Rejected';\n    }\n  }\n});\nexport const {\n  setState\n} = movieSlice.actions;\nexport default movieSlice.reducer;","map":{"version":3,"sources":["/Users/skj14102001/Desktop/Moviebase/src/redux/movieSlice.js"],"names":["createSlice","createAsyncThunk","act","fetcher","fetchMovies","Text","Page","console","log","dataFetch","get","then","res","data","Search","movieSlice","name","initialState","movieArr","status","page","query","reducers","setState","state","action","payload","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"AAAA,SACIA,WADJ,EAEIC,gBAFJ,QAGO,kBAHP;AAIA,SACIC,GADJ,QAEO,sBAFP;AAIA,OAAOC,OAAP,MAAoB,UAApB;AAGA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CACvC,oBADuC,EAEvC,cAGM;AAAA,MAHA;AACFI,IAAAA,IADE;AAEFC,IAAAA;AAFE,GAGA;AACFC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,IAAhC;AACA,QAAMI,SAAS,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAa,sBAAqBL,IAAK,SAAQC,IAAK,EAApD,EACnBK,IADmB,CACbC,GAAD,IAAUA,GAAG,CAACC,IAAJ,CAASC,MADL,CAAxB;AAEAP,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,SAAOA,SAAP;AACH,CAXsC,CAApC;AAeP,MAAMM,UAAU,GAAGf,WAAW,CAAC;AAC3BgB,EAAAA,IAAI,EAAE,QADqB;AAE3BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,MAAM,EAAE,SAFE;AAGVC,IAAAA,IAAI,EAAE,CAHI;AAIVC,IAAAA,KAAK,EAAE;AAJG,GAFa;AAQ3BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBlB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBiB,MAArB;AACAD,MAAAA,KAAK,CAACJ,IAAN,GAAaK,MAAM,CAACC,OAAP,CAAepB,IAA5B;AACAkB,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAAP,CAAerB,IAA7B;AACH;AALK,GARiB;AAe3BsB,EAAAA,aAAa,EAAE;AACX,KAACvB,WAAW,CAACwB,OAAb,GAAwBJ,KAAD,IAAW;AAC9BA,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACf,WAAW,CAACyB,SAAb,GAAyB,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBiB,MAAtB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBgB,KAAK,CAACN,QAA5B;AACAM,MAAAA,KAAK,CAACN,QAAN,GAAiBO,MAAM,CAACC,OAAxB;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBgB,KAAK,CAACN,QAA3B;AACH,KAVU;AAWX,KAACd,WAAW,CAAC0B,QAAb,GAAyBN,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACL,MAAN,GAAe,UAAf;AACH;AAbU;AAfY,CAAD,CAA9B;AAgCA,OAAO,MAAM;AACTI,EAAAA;AADS,IAETR,UAAU,CAACgB,OAFR;AAGP,eAAehB,UAAU,CAACiB,OAA1B","sourcesContent":["import {\n    createSlice,\n    createAsyncThunk\n} from \"@reduxjs/toolkit\";\nimport {\n    act\n} from \"react-dom/test-utils\";\n\nimport fetcher from \"./movies\";\n\n\nexport const fetchMovies = createAsyncThunk(\n    'movies/fetchMovies',\n    async({\n        Text,\n        Page\n    }) => {\n        console.log(\"async is getting\", Text);\n        const dataFetch = await fetcher.get(`?apikey=e8960dea&s=${Text}&page=${Page}`)\n            .then((res) => (res.data.Search))\n        console.log(dataFetch);\n        return dataFetch;\n    }\n)\n\n\nconst movieSlice = createSlice({\n    name: \"movies\",\n    initialState: {\n        movieArr: [],\n        status: \"Pending\",\n        page: 1,\n        query: \"\",\n    },\n    reducers: {\n        setState: (state, action) => {\n            console.log(\"Hello\", action);\n            state.page = action.payload.Page;\n            state.query = action.payload.Text;\n        }\n    },\n    extraReducers: {\n        [fetchMovies.pending]: (state) => {\n            state.status = 'Pending'\n        },\n        [fetchMovies.fulfilled]: (state, action) => {\n            state.status = 'Fulfilled';\n            console.log(\"actoin\", action);\n            console.log(\"before\", state.movieArr);\n            state.movieArr = action.payload;\n            console.log(\"after\", state.movieArr);\n        },\n        [fetchMovies.rejected]: (state) => {\n            state.status = 'Rejected'\n        }\n    }\n\n})\nexport const {\n    setState\n} = movieSlice.actions;\nexport default movieSlice.reducer;"]},"metadata":{},"sourceType":"module"}